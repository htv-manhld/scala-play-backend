services:
  # Infrastructure services - Separate databases per service
  user-db:
    image: postgres:15-alpine
    container_name: microservices-user-db
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  notification-db:
    image: postgres:15-alpine
    container_name: microservices-notification-db
    environment:
      POSTGRES_DB: notificationdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  analytics-db:
    image: postgres:15-alpine
    container_name: microservices-analytics-db
    environment:
      POSTGRES_DB: analyticsdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - analytics-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: microservices-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: microservices-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    ports:
      - "6379:6379"
    networks:
      - microservices-network

  # Service discovery
  consul:
    image: hashicorp/consul:1.16
    container_name: microservices-consul
    command: agent -server -bootstrap-expect=1 -data-dir=/consul/data -config-dir=/consul/config -ui -client=0.0.0.0
    ports:
      - "8500:8500"
    networks:
      - microservices-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: microservices-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices-network

  grafana:
    image: grafana/grafana:latest
    container_name: microservices-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    networks:
      - microservices-network

  # Microservices
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: microservices-api-gateway
    ports:
      - "9000:9000"
    env_file:
      - ./microservices/api-gateway/.env
    depends_on:
      - consul
      - redis
    networks:
      - microservices-network

  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    container_name: microservices-user-service
    ports:
      - "9001:9001"
    env_file:
      - ./microservices/user-service/.env
    depends_on:
      user-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - microservices-network

  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    container_name: microservices-notification-service
    ports:
      - "9002:9002"
    env_file:
      - ./microservices/notification-service/.env
    depends_on:
      notification-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network

  analytics-service:
    build:
      context: ./microservices/analytics-service
      dockerfile: Dockerfile
    container_name: microservices-analytics-service
    ports:
      - "9003:9003"
    env_file:
      - ./microservices/analytics-service/.env
    depends_on:
      analytics-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      consul:
        condition: service_started
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  user-db-data:
  notification-db-data:
  analytics-db-data: